//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReswareOrderMonitorService.ReswareActionEvent {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceiveActionEventData", Namespace="http://schemas.datacontract.org/2004/07/Adeptive.ResWare.Services")]
    [System.SerializableAttribute()]
    internal partial class ReceiveActionEventData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ActionEventCodeField;
        
        private string FileNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string ActionEventCode {
            get {
                return this.ActionEventCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionEventCodeField, value) != true)) {
                    this.ActionEventCodeField = value;
                    this.RaisePropertyChanged("ActionEventCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string FileNumber {
            get {
                return this.FileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNumberField, value) != true)) {
                    this.FileNumberField = value;
                    this.RaisePropertyChanged("FileNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceiveActionEventResponse", Namespace="http://schemas.datacontract.org/2004/07/Adeptive.ResWare.Services")]
    [System.SerializableAttribute()]
    internal partial class ReceiveActionEventResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string MessageField;
        
        private ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponseCode ResponseCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponseCode ResponseCode {
            get {
                return this.ResponseCodeField;
            }
            set {
                if ((this.ResponseCodeField.Equals(value) != true)) {
                    this.ResponseCodeField = value;
                    this.RaisePropertyChanged("ResponseCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceiveActionEventResponseCode", Namespace="http://schemas.datacontract.org/2004/07/Adeptive.ResWare.Services")]
    internal enum ReceiveActionEventResponseCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_LOGIN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALID_FILE_NUMBER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DOWN_FOR_MAINTENANCE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNEXPECTED_ERROR = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACTION_EVENT_NOT_FOUND = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionEventServiceResult", Namespace="http://schemas.datacontract.org/2004/07/ActionEventService.Models")]
    [System.SerializableAttribute()]
    internal partial class ActionEventServiceResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActionCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ActionCompletedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionEventCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal bool ActionCompleted {
            get {
                return this.ActionCompletedField;
            }
            set {
                if ((this.ActionCompletedField.Equals(value) != true)) {
                    this.ActionCompletedField = value;
                    this.RaisePropertyChanged("ActionCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<System.DateTime> ActionCompletedDateTime {
            get {
                return this.ActionCompletedDateTimeField;
            }
            set {
                if ((this.ActionCompletedDateTimeField.Equals(value) != true)) {
                    this.ActionCompletedDateTimeField = value;
                    this.RaisePropertyChanged("ActionCompletedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string ActionEventCode {
            get {
                return this.ActionEventCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionEventCodeField, value) != true)) {
                    this.ActionEventCodeField = value;
                    this.RaisePropertyChanged("ActionEventCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime CreatedDateTime {
            get {
                return this.CreatedDateTimeField;
            }
            set {
                if ((this.CreatedDateTimeField.Equals(value) != true)) {
                    this.CreatedDateTimeField = value;
                    this.RaisePropertyChanged("CreatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string FileNumber {
            get {
                return this.FileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNumberField, value) != true)) {
                    this.FileNumberField = value;
                    this.RaisePropertyChanged("FileNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReswareActionEvent.IReceiveActionEventService")]
    internal interface IReceiveActionEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/ReceiveActionEvent", ReplyAction="http://tempuri.org/IReceiveActionEventService/ReceiveActionEventResponse")]
        ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponse ReceiveActionEvent(ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/ReceiveActionEvent", ReplyAction="http://tempuri.org/IReceiveActionEventService/ReceiveActionEventResponse")]
        System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponse> ReceiveActionEventAsync(ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/GetAllActionEvents", ReplyAction="http://tempuri.org/IReceiveActionEventService/GetAllActionEventsResponse")]
        ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult[] GetAllActionEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/GetAllActionEvents", ReplyAction="http://tempuri.org/IReceiveActionEventService/GetAllActionEventsResponse")]
        System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult[]> GetAllActionEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/GetActionEventById", ReplyAction="http://tempuri.org/IReceiveActionEventService/GetActionEventByIdResponse")]
        ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult GetActionEventById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/GetActionEventById", ReplyAction="http://tempuri.org/IReceiveActionEventService/GetActionEventByIdResponse")]
        System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult> GetActionEventByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/DeleteActionEventById", ReplyAction="http://tempuri.org/IReceiveActionEventService/DeleteActionEventByIdResponse")]
        int DeleteActionEventById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/DeleteActionEventById", ReplyAction="http://tempuri.org/IReceiveActionEventService/DeleteActionEventByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteActionEventByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/UpdateActionEvent", ReplyAction="http://tempuri.org/IReceiveActionEventService/UpdateActionEventResponse")]
        int UpdateActionEvent(ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult actionEventServiceResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveActionEventService/UpdateActionEvent", ReplyAction="http://tempuri.org/IReceiveActionEventService/UpdateActionEventResponse")]
        System.Threading.Tasks.Task<int> UpdateActionEventAsync(ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult actionEventServiceResult);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IReceiveActionEventServiceChannel : ReswareOrderMonitorService.ReswareActionEvent.IReceiveActionEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class ReceiveActionEventServiceClient : System.ServiceModel.ClientBase<ReswareOrderMonitorService.ReswareActionEvent.IReceiveActionEventService>, ReswareOrderMonitorService.ReswareActionEvent.IReceiveActionEventService {
        
        public ReceiveActionEventServiceClient() {
        }
        
        public ReceiveActionEventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReceiveActionEventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiveActionEventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiveActionEventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponse ReceiveActionEvent(ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventData data) {
            return base.Channel.ReceiveActionEvent(data);
        }
        
        public System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventResponse> ReceiveActionEventAsync(ReswareOrderMonitorService.ReswareActionEvent.ReceiveActionEventData data) {
            return base.Channel.ReceiveActionEventAsync(data);
        }
        
        public ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult[] GetAllActionEvents() {
            return base.Channel.GetAllActionEvents();
        }
        
        public System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult[]> GetAllActionEventsAsync() {
            return base.Channel.GetAllActionEventsAsync();
        }
        
        public ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult GetActionEventById(System.Guid id) {
            return base.Channel.GetActionEventById(id);
        }
        
        public System.Threading.Tasks.Task<ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult> GetActionEventByIdAsync(System.Guid id) {
            return base.Channel.GetActionEventByIdAsync(id);
        }
        
        public int DeleteActionEventById(System.Guid id) {
            return base.Channel.DeleteActionEventById(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteActionEventByIdAsync(System.Guid id) {
            return base.Channel.DeleteActionEventByIdAsync(id);
        }
        
        public int UpdateActionEvent(ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult actionEventServiceResult) {
            return base.Channel.UpdateActionEvent(actionEventServiceResult);
        }
        
        public System.Threading.Tasks.Task<int> UpdateActionEventAsync(ReswareOrderMonitorService.ReswareActionEvent.ActionEventServiceResult actionEventServiceResult) {
            return base.Channel.UpdateActionEventAsync(actionEventServiceResult);
        }
    }
}
